generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                 String   @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?  @db.Text
    id_token           String?  @db.Text
    session_state      String?
    oauth_token_secret String?  @db.Text
    oauth_token        String?  @db.Text
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            String      @id @default(cuid())
    name          String?     @db.Text
    email         String?     @unique
    emailVerified DateTime?
    image         String?     @db.Text
    accounts      Account[]
    createdAt     DateTime    @default(now())
    signupReason  String?
    orgs          OrgsUsers[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model OrgsUsers {
    userId String
    orgId  String
    role   UserRole @default(MEMBER)
    user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    org    Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)

    @@id([userId, orgId])
}

enum UserRole {
    ADMIN
    MEMBER
}

model OrgInviteLink {
    createdAt DateTime @default(now())
    key       String   @id
    orgId     String
    org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Org {
    id              String              @id @default(cuid())
    name            String?
    users           OrgsUsers[]
    createdAt       DateTime            @default(now())
    updatedAt       DateTime            @default(now()) @updatedAt
    invitationLinks OrgInviteLink[]
    // subscriptions    Subscription[]
    // campaigns        Campaign[]
    // sendingAccounts  SendingMailAccount[]
    subscriptions   Subscription[]
    payments        PaymentForCredits[]
    generations     Generation[]
}

model Generation {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    orgId String
    org   Org    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    words Int
    chars Int
}

// used to compute org credits, can be used for both subscriptions and 1 time payments
// if it's a 1 time payment, orderId will not point to a subscription
model PaymentForCredits {
    id           String        @id @default(cuid())
    // price          Int
    // credits   Int
    createdAt    DateTime      @default(now())
    orderId      String
    variantId    String
    productId    String
    variantName  String?
    email        String?       @db.VarChar(255)
    // subscriptionId String?
    orgId        String
    org          Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
    subscription Subscription? @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
}

model Subscription {
    subscriptionId String              @id
    orderId        String              @unique
    variantId      String
    productId      String
    variantName    String?
    createdAt      DateTime            @default(now())
    status         SubscriptionStatus
    payments       PaymentForCredits[]
    endsAt         DateTime?
    email          String?             @db.VarChar(255)
    orgId          String
    org            Org                 @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
    on_trial
    active
    paused
    past_due
    unpaid
    cancelled
    expired
}
